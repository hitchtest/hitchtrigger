{% for peewee_version in peewee_versions %}
{% for python_version in python_versions %}
{% for humanize_version in humanize_versions %}
- name: Dependency watch
  preconditions:
    python_version: {{ python_version }}
    peewee_version: {{ peewee_version }}
    humanize_version: {{ humanize_version }}
  tags:
    - dependency
    - file-watched
    - py{{ python_version }}
    - peewee{{ peewee_version }}
  scenario:
    - Touch: tomonitor.txt

    - Run command: |
        import hitchtrigger

        trigmon = hitchtrigger.Monitor("monitor.sqlite")
        filechanged = trigmon.modified(["tomonitor.txt"])
        filewatchdependency = trigmon.was_run("filewatch")

        with trigmon.watch("filewatch", filechanged) as trigger:
            if trigger:
                output(trigger.why)

    - Output is: |
        New file(s) / director(ies) detected:
          - tomonitor.txt

    - Run Command: |
        with trigmon.watch("dependentwatch", filewatchdependency) as trigger:
            if trigger:
                output(trigger.why)

    - Output is: |
        Dependent watch 'filewatch' was triggered.

    - Run command: |
        with trigmon.watch("filewatch", filechanged) as trigger:
            if trigger:
                should_not_run()

        with trigmon.watch("dependentwatch", filewatchdependency) as trigger:
            if trigger:
                should_not_run()

    - Touch: tomonitor.txt

    - Run command: |
        with trigmon.watch("filewatch", filechanged) as trigger:
            if trigger:
                output(trigger.why)

    - Output is: |
        File(s) / director(ies) changed:
          - tomonitor.txt

    - Run command: |
        with trigmon.watch("dependentwatch", filewatchdependency) as trigger:
            if trigger:
                output(trigger.why)

    - Output is: |
        Dependent watch 'filewatch' was triggered.

    - Assert exception:
        command: |
          with trigmon.watch("anotherwatch", trigmon.was_run("nonexistent")) as trigger:
            pass
        exception: Dependent model 'nonexistent' not found.
{% endfor %}
{% endfor %}
{% endfor %}
